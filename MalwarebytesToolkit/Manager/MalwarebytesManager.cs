using MalwarebytesToolkit.Actions;
using MalwarebytesToolkit.Enums;
using System;
using System.IO;

namespace MalwarebytesToolkit.Manager
{
    public class MalwarebytesManager
    {
        private static FileManager _fileManager;
        private static ProcessManager _processManager;
        private static ServiceManager _serviceManager;

        private static string _baseDirectory;

        private static readonly string assistantExe = "assistant.exe";
        private static readonly string assistantDll = "assistant.dll";
        private static readonly string malwarebytesDll = "Malwarebytes.dll";
        private static readonly string malwarebytesAssistantExe = "malwarebytes_assistant.exe";

        public MalwarebytesManager()
        {
            _fileManager = new FileManager();
            _processManager = new ProcessManager();
            _serviceManager = new ServiceManager();

            if (!_fileManager.MalwarebytesExists() && !_processManager.IsMalwarebytesIsRunning())
            {
                throw new Exception("Malwarebytes does not seem to exist");
            }

            _baseDirectory = _fileManager.GetMalwarebytesPath();
        }

        public void RemoveNotifications()
        {
            if (!_serviceManager.IsServiceStopped())
            {
                KillService();
            }

            _serviceManager.IsServiceStopped(20, 1000);

            if (!_serviceManager.IsServiceStopped())
            {
                return;
            }

            string path = Path.Combine(_baseDirectory, malwarebytesDll);
            BaseAssemblyAction patchMethods = new DisableNotificationsAction(path, _baseDirectory);
            patchMethods.Patch();
        }

        //TODO
        public void ClearCustomProtectedApps()
        {

        }

        //TODO
        public string GetQuarantine()
        {
            return "";
        }

        public void AddExclusion(ExclusionType exclusionType, string[] argument)
        {
            if (!_serviceManager.IsServiceStopped())
            {
                KillService();
            }

            _serviceManager.IsServiceStopped(20, 1000);

            if (!_serviceManager.IsServiceStopped())
            {
                return;
            }

            string path = Path.Combine(_baseDirectory, assistantDll);

            BaseAssemblyAction addExclusionAction = new AddExclusionAction(path, argument);
            addExclusionAction.Patch();

            string pathExe = Path.Combine(_baseDirectory, assistantExe);
            _processManager.RunProcess(pathExe, "-EnableAe");
        }

        private void RunCommand(string argument)
        {
            string path = Path.Combine(_baseDirectory, malwarebytesAssistantExe);
            _processManager.RunProcess(path, argument);
        }

        public void KillService() => RunCommand("--StopService");

        public void DisableRansomwareProtection() => RunCommand("--DisableRw");

        public void DisableAutoUpdates() => RunCommand("--DisableAutoDbcls");

        public void DisableExploitProtection() => RunCommand("--DisableAe");

        public void DisableWebProtection() => RunCommand("--DisableWebProtection");

        public void DisableMalwarePUPProtection() => RunCommand("--DisableRtp");
    }
}
