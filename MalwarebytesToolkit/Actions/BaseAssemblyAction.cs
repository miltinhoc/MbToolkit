using MalwarebytesToolkit.Resolver;
using Mono.Cecil;
using System;
using System.IO;
using System.Linq;

namespace MalwarebytesToolkit.Actions
{
    public abstract class BaseAssemblyAction
    {
        public AssemblyDefinition _assemblyDefinition;
        public TypeDefinition _typeDefinition;
        public MethodDefinition _methodDefinition;
        //public DefaultAssemblyResolver _resolver;
        public RepackAssemblyResolver _resolver;

        public BaseAssemblyAction(string dllPath)
        {
            GetAssemblyWithDependencies(dllPath);
        }

        public BaseAssemblyAction(string dllPath, string typeName, string methodName)
        {
            GetAssemblyWithDependencies(dllPath);
            SetType(typeName);
            SetMethod(methodName);
        }

        public void GetAssemblyWithDependencies(string path)
        {
            _resolver = new RepackAssemblyResolver();
            //_resolver = new DefaultAssemblyResolver();
            _resolver.AddSearchDirectory(Path.GetDirectoryName(path));

            var memoryStream = new MemoryStream(File.ReadAllBytes(path));

            var readerParameters = new ReaderParameters
            {
                AssemblyResolver = _resolver
            };

            _assemblyDefinition = AssemblyDefinition.ReadAssembly(memoryStream, readerParameters);
        }

        public abstract void Patch();

        public void Save(string path)
        {
            _assemblyDefinition.Write(path);
        }

        public void SetMethod(string name)
        {
            if (_typeDefinition == null)
            {
                return;
            }

            _methodDefinition = _typeDefinition.Methods.FirstOrDefault(m => m.Name == name)
                ?? _typeDefinition.BaseType?.Resolve()?.Methods.FirstOrDefault(m => m.Name == name);
        }

        public MethodDefinition GetMethodByName(string name)
        {
            if (_typeDefinition == null)
            {
                return null;
            }

            return _typeDefinition.Methods.FirstOrDefault(m => m.Name == name)
                ?? _typeDefinition.BaseType?.Resolve()?.Methods.FirstOrDefault(m => m.Name == name);
        }

        public void SetType(string name)
        {
            _typeDefinition = _assemblyDefinition.MainModule.Types.FirstOrDefault(t => t.Name == name);
        }

        public TypeDefinition GetTypeByName(string name)
        {
            return _assemblyDefinition.MainModule.Types.FirstOrDefault(t => t.Name == name);
        }

        public MethodReference ImportMethodWithSpecificParameters(TypeReference type, string methodName, params string[] parameterTypeNames)
        {
            var typeDefinition = type.Resolve();

            var method = typeDefinition.Methods.FirstOrDefault(m =>
                m.Name == methodName &&
                m.Parameters.Count == parameterTypeNames.Length &&
                m.Parameters.Select(p => p.ParameterType.Name).SequenceEqual(parameterTypeNames));

            if (method != null)
            {
                return type.Module.ImportReference(method);
            }

            return null;
        }

        public void AddAssemblyReferenceIfNotExists(ModuleDefinition module, string assemblyPath)
        {
            if (File.Exists(assemblyPath))
            {
                var asm = AssemblyDefinition.ReadAssembly(assemblyPath);

                bool referenceExists = module.AssemblyReferences.Any(ar => ar.Name == asm.Name.Name);

                if (!referenceExists)
                {
                    var reference = new AssemblyNameReference(asm.Name.Name, asm.Name.Version)
                    {
                        Culture = asm.Name.Culture,
                        PublicKeyToken = asm.Name.PublicKeyToken,
                        Version = asm.Name.Version
                    };

                    module.AssemblyReferences.Add(reference);
                }
            }
        }

        public TypeReference ResolveTypeReference(string assemblyDir, string assemblyName, string @namespace, string typeName)
        {
            var assemblyPath = Path.Combine(assemblyDir, assemblyName);
            if (File.Exists(assemblyPath))
            {
                var asm = AssemblyDefinition.ReadAssembly(assemblyPath, new ReaderParameters { AssemblyResolver = _resolver });
                var type = asm.MainModule.Types.FirstOrDefault(t => t.Namespace == @namespace && t.Name == typeName);
                if (type != null)
                {
                    return asm.MainModule.ImportReference(type);
                }
            }

            return null;
        }
    }
}
