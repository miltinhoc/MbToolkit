using Mono.Cecil.Cil;
using System.Linq;

namespace MalwarebytesToolkit.Actions
{
    public class DisableNotificationsAction : BaseAssemblyAction
    {
        public string DllPath { get; set; }
        public string BasePath { get; set; }

        public DisableNotificationsAction(string dllPath, string basePath) : base(dllPath)
        {
            DllPath = dllPath;
            BasePath = basePath;
        }

        public override void Patch()
        {
            string[] types = new string[] {
                "ExploitBlockedNotificationView",
                "GeneralBlockNotificationView",
                "ImageNotificationView",
                "IrisNotificationTemplateBannerView",
                "IrisNotificationTemplateCenterTopIconView",
                "IrisNotificationTemplateLeftIconView",
                "RansomwareBlockedNotificationView",
                "RTPBlockedNotificationView",
                "ScanNewDownloadsNotificationView",
                "ScanReminderNotificationView",
                "SimpleNotificationView",
                "WebsiteBlockedNotificationView",
                "WelcomeToMb5NotificationView"
            };

            foreach (var type in types)
            {
                var t = GetTypeByName(type);

                if (t == null)
                    continue;

                var constructor = t.Methods.FirstOrDefault(m => m.IsConstructor && !m.IsStatic);

                if (constructor == null)
                    continue;

                var ilProcessor = constructor.Body.GetILProcessor();

                for (int i = constructor.Body.Instructions.Count - 1; i >= 0; i--)
                {
                    var instruction = constructor.Body.Instructions[i];

                    if (instruction.OpCode != OpCodes.Ret)
                    {
                        ilProcessor.Remove(instruction);
                    }
                }
            }

            Save(DllPath);
        }
    }
}
